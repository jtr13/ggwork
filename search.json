[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "TITLE",
    "section": "",
    "text": "Introduction\n\nwriteLines(\"This is a test.\", con = \"test.txt\")",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "timeseries.html",
    "href": "timeseries.html",
    "title": "1  Time Series",
    "section": "",
    "text": "library(tidyverse)\nlibrary(packageRank)\n\ntop_packages &lt;- c(\"ggrepel\", \"cowplot\",\"ggpubr\", \"ggsci\", \"ggsignif\", \"patchwork\", \"ggmap\")\n\ntime_series &lt;- function(pkg) {\n  cranDownloads(packages = pkg, to = 2025)$cranlogs.data\n}\n\nallpackages &lt;- map_dfr(top_packages, time_series)\n\n\nggplot(allpackages, aes(x = date, y = count, color = package)) + \n  geom_smooth(se = FALSE, linewidth = .75)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Time Series</span>"
    ]
  },
  {
    "objectID": "tidyverse_gallery_scrape.html",
    "href": "tidyverse_gallery_scrape.html",
    "title": "2  Tidyverse Gallery Scrape",
    "section": "",
    "text": "The following code is designed to scrape the names of packages in the ggplot environment from the tidyverse gallery (https://exts.ggplot2.tidyverse.org/gallery/) and then retrieve the cumulative historical cran download count for each. It also scrapes the github star count listed for these packages.\nFirst import the necessary packages:\n\nlibrary(tidyverse)\nlibrary(rvest) #html webscraping\nlibrary(packageRank) #to retrieve CRAN download counts\n\nRead in the downloaded tidyverse gallery page html file. Must download webpage for the github star scrape to work properly.\n\ndf &lt;- read_html(\"raw_data/exts.ggplot2.tidyverse.org.html\")\n\nScrape the package names and store in a package_names vector.\n\npackage_names &lt;- df |&gt;\n  html_elements(\"div.card-content\") |&gt; \n  html_elements(\"span.card-title\") |&gt; \n  html_text()\n\nTo find the most current total historical download count, set a target_date of two days before today. Depending on the time of day, cranDownloads is updated to either 1 or 2 days previous to the current day.\n\ntarget_date &lt;- Sys.Date()-2\n\nThe below function get_total_downloads takes in a package name to retrieve a cumulative count of that package’s cran downloads up until the set target_date by utilizing the cranDownloads funcion of packageRank. Handles error that arises when package is not found on CRAN. Returned as dataframe.\n\nget_total_downloads &lt;- function(pkg) {\n  \n  #to = 2025 pulls entire download history\n  cd &lt;- tryCatch(\n    cranDownloads(packages = pkg, to = 2025),\n    \n    #if the package is not found in cran return NA\n    error = function(e) NA\n  )\n  \n  #retrieving the 'cumulative' value of a particular date gets total download count up      to that date\n  count &lt;- ifelse(length(cd) == 1, NA, cd$cranlogs.data$cumulative [ \n    cd$cranlogs.data$date == target_date\n  ])\n  \n  data.frame(package = pkg, downloads = count)\n}\n\nRetrieve cran downlaod count for ech package by mapping get_total_downloads across scraped package_names and combining returned dataframes in one df. Will take a few minutes to complete.\n\ngallery_packages &lt;- map_dfr(package_names, get_total_downloads)\n\nScrape github star count from the gallery webpage and add to dataframe.\n\ngithub_stars &lt;- df |&gt; \n  html_elements(\"span.github-btn\") |&gt;\n  html_elements(\"a.gh-count\") |&gt; \n  html_text() |&gt; as.numeric()\n\ngallery_packages$stars = github_stars\n\nStore data in a new dataframe with a column indicating gallery as the source and export as csv.\n\ngallery_packages$gallery = TRUE\n\nhead(gallery_packages)\n\n   package downloads stars gallery\n1 ggQQunif     24056     8    TRUE\n2  ggupset    166148   354    TRUE\n3     xmrr     25557     7    TRUE\n4    ggpcp      8857     1    TRUE\n5     gg3D        NA   104    TRUE\n6     ggQC     63697    46    TRUE\n\nwrite_csv(gallery_packages, \"generated_data/gallery_packages.csv\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Tidyverse Gallery Scrape</span>"
    ]
  },
  {
    "objectID": "cran_scrape.html",
    "href": "cran_scrape.html",
    "title": "3  CRAN Packages Webpage",
    "section": "",
    "text": "The following code is designed to scrape the names of packages in the ggplot environment from the CRAN page (https://cran.r-project.org/web/packages/available_packages_by_name.html) to then retrieve the cumulative historical cran download count for each.\nFirst import the necessary packages:\n\nlibrary(tidyverse)\nlibrary(rvest) #html webscraping\nlibrary(packageRank) #to retrieve CRAN download counts\n\nRead in the downloaded CRAN packages (alphabetical order) page html file.\n\ndf &lt;- read_html(\"raw_data/CRAN_ Available Packages By Name.html\")\n\nScrape all packages names from the page.\n\nnames &lt;- df |&gt;\n  html_elements(\"span.CRAN\") |&gt; \n  html_text()\n\nFilter for the names that start with gg by finding the index boundaries and store in gg_package_names.\n\n#beginning index for 'gg' names\ngg_start &lt;- which(substr(names, 1, 2) == \"gg\")[1] \n#end index for 'gg' names\ngg_end &lt;- which(substr(names, 1, 2) == \"gh\")[1] - 1 \n\ngg_package_names &lt;- names[gg_start:gg_end]\n\nRemove packages that start with gg but are not relevant to ggplot2. These names were determined manually and saved in the ‘non_ggplot_packages.csv’ file.\n\nremove_packages &lt;- read.csv(\"raw_data/non_ggplot_packages.csv\")[[1]]\n\nggplot_package_names &lt;- gg_package_names[!gg_package_names %in% remove_packages]\n\nScrape all package descriptions from the page. The resulting vector elements alternate between a package name and its description (e.g. ‘ggplot2’, ‘Create Elegant Data Visualisations Using the Grammar of Graphics’, ‘ggplot2.utils’, etc.), and is offset by a “” element between every letter change (e.g. between the end of all ‘a’ names and start of ‘b’ names).\n\n#returns a vector that alternates between package names and their descriptions\ndesc &lt;- df |&gt;\n  html_elements(\"div.container\") |&gt; \n  html_elements(\"table\") |&gt; \n  html_elements(\"tbody\") |&gt; \n  html_elements(\"tr\") |&gt; \n  html_elements(\"td\") |&gt; \n  html_text()\n\nFilter for only the packages with names that start with ‘gg’ by identifying index boundaries, and remove package names, keeping only descriptions, by retaining every other element to store in new vector.\n\n#beginning index for 'gg' names in descriptions\nfirst_gg &lt;- which(substr(desc, 1, 2) == \"gg\")[1] \n\n#end index for 'gg' names in descriptions\nend_gg &lt;- which(substr(desc, 1, 2) == \"gh\")[1] - 1 \n\ndesc_gg &lt;- desc[first_gg:end_gg]\n\n#Select only descriptions (remove package names) by storing every other element\ngg_descriptions &lt;- desc_gg[c(FALSE, TRUE)]\n\nRemove descriptions of packages starting with gg but not relevant to ggplot2. Found manually and saved in ‘non_ggplot_desc.csv’ file.\n\n#removes line breaks in descriptions to match csv file formatting\ngg_descriptions &lt;- gsub(\"\\n\", \" \", gg_descriptions)\n\nremove_desc &lt;- read.csv(\"raw_data/non_ggplot_desc.csv\")[[1]]\n\nggplot_descriptions &lt;- gg_descriptions[!gg_descriptions %in% remove_desc]\n\nThe following block of code finds additional ggplot packages that do not start with gg. The names and descriptions are saved in csv files that can be read in for the future.\n\n#finds all non gg package names\nnon_gg_desc &lt;- desc[c(1:(first_gg-1), (end_gg+1):length(desc))] \n\n#found indices at which either the description or name contains 'ggplot', removes the first index since it is a duplicate\ngg_indices &lt;- grep('ggplot', non_gg_desc)[-1] \n\n#removes a known duplicate index where name and desc both contain 'ggplot'\ngg_indices &lt;- gg_indices[-match(30865, gg_indices)] \n\n\n#replaces manually found indices at which the name contains 'ggplot' with the indices of their descriptions\nreplace &lt;- c(13588, 20251, 29832)\nfor (num in replace) {\n  pos &lt;- match(num, gg_indices)\n  gg_indices[pos] &lt;- gg_indices[pos] + 1\n}\n\n#names are at the elements -1 before each desc\nadd_ggplot_names &lt;- non_gg_desc[gg_indices-1] \nadd_ggplot_desc &lt;- non_gg_desc[gg_indices]\n\n#save down additional names and desc for future reference\nwrite_csv(data.frame(names = add_ggplot_names, indices = gg_indices-1), \"raw_data/add_ggplot_names.csv\")\nwrite_csv(data.frame(desc = add_ggplot_desc, indices = gg_indices), \"raw_data/add_ggplot_desc.csv\")\n\nAdd the additional ggplot package names and descriptions found and saved in the code block above.\n\nadd_gg_names &lt;- read.csv(\"raw_data/add_ggplot_names.csv\")[[1]]\nadd_gg_desc &lt;- read.csv(\"raw_data/add_ggplot_desc.csv\")[[1]]\n\nall_ggplot_packages &lt;- c(ggplot_package_names, add_gg_names)\nall_ggplot_desc &lt;- c(ggplot_descriptions, add_gg_desc)\n\nTo find the most current total historical download count, set a target_date of two days before today. Depending on the time of day, cranDownloads is updated to either 1 or 2 days previous to the current day.\n\ntarget_date &lt;- Sys.Date()-2\n\nThe below function get_total_downloads takes in a package name to retrieve a cumulative count of that package’s cran downloads up until the set target_date by utilizing the cranDownloads funcion of packageRank. Handles error that arises when package is not found on CRAN. Returned as dataframe.\n\nget_total_downloads &lt;- function(pkg) {\n  \n  #to = 2025 pulls entire download history\n  cd &lt;- tryCatch(\n    cranDownloads(packages = pkg, to = 2025),\n    \n    #if the package is not found in cran return NA\n    error = function(e) NA\n  )\n  \n  #retrieving the 'cumulative' value of a particular date gets total download count up      to that date\n  count &lt;- ifelse(length(cd) == 1, NA, cd$cranlogs.data$cumulative [ \n    cd$cranlogs.data$date == target_date\n  ])\n  \n  data.frame(package = pkg, downloads = count)\n}\n\nRetrieve historic cran download count for each package by mapping get_total_downloads across scraped package_names and combining returned dataframes in one df. Will take a few minutes to complete.\n\ncran_packages &lt;- map_dfr(all_ggplot_packages, get_total_downloads)\n\nStore data in new dataframe with a column indicating CRAN page as the source and export as csv file.\n\ncran_packages$description = all_ggplot_desc\ncran_packages$CRAN = TRUE\n\nhead(cran_packages)\n\n      package downloads\n1      gg.gap     43989\n2        gg1d      1461\n3     ggalign      7619\n4   ggaligner      3980\n5 ggalignment     10578\n6     ggallin     36002\n                                                           description CRAN\n1                              Define Segments in y-Axis for 'ggplot2' TRUE\n2       Exploratory Data Analysis using Tiled One-Dimensional Graphics TRUE\n3                  A 'ggplot2' Extension for Consistent Axis Alignment TRUE\n4 Visualizing Sequence Alignment by Generating Publication-Ready Plots TRUE\n5                                   Plots 'D&D'-Style Alignment Charts TRUE\n6                                      Grab Bag of 'ggplot2' Functions TRUE\n\nwrite_csv(cran_packages, \"generated_data/cran_packages.csv\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>CRAN Packages Webpage</span>"
    ]
  },
  {
    "objectID": "gallery_cran_merge.html",
    "href": "gallery_cran_merge.html",
    "title": "4  Merge tidyverse gallery and cran page packages",
    "section": "",
    "text": "Read in and merge the data on ggplot packages from the gallery and from the cran webpage to store in a new dataframe, packages.\n\nlibrary(tidyverse)\n\ngallery_packages &lt;- read_csv(\"generated_data/gallery_packages.csv\")\n\ncran_packages &lt;- read_csv(\"generated_data/cran_packages.csv\")\n\npackages &lt;- full_join(gallery_packages, cran_packages, by = c(\"package\", \"downloads\"))\n\nSort by download count and save.\n\nsorted_packages &lt;- arrange(packages, desc(downloads))\n\nhead(sorted_packages)\n\n# A tibble: 6 × 6\n  package  downloads stars gallery description                             CRAN \n  &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt; &lt;lgl&gt;   &lt;chr&gt;                                   &lt;lgl&gt;\n1 ggplot2  164944653    NA NA      Create Elegant Data Visualisations Usi… TRUE \n2 ggrepel   24424548  1228 TRUE    Automatically Position Non-Overlapping… TRUE \n3 cowplot   19163953   712 TRUE    Streamlined Plot Theme and Plot Annota… TRUE \n4 ggpubr    16975803  1154 TRUE    'ggplot2' Based Publication Ready Plots TRUE \n5 ggsci     12608425   676 TRUE    Scientific Journal and Sci-Fi Themed C… TRUE \n6 ggsignif  12532789   597 TRUE    Significance Brackets for 'ggplot2'     TRUE \n\nwrite_csv(sorted_packages, \"generated_data/all_packages.csv\")",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Merge tidyverse gallery and cran page packages</span>"
    ]
  },
  {
    "objectID": "cd_plots.html",
    "href": "cd_plots.html",
    "title": "5  Plots to Visualize Download Trends",
    "section": "",
    "text": "The following code creates various plots that allow us to visualize different trends over time in the cran download counts of ggplot2 packages.\nFirst import the necessary packages.\n\nlibrary(tidyverse)\nlibrary(packageRank)\nlibrary(plotly)\nlibrary(lubridate)\n\nRead in the packages stored in the ‘all_packages.csv’ file scraped from the tidyverse gallery and CRAN webpages in previous chapters.\n\nsorted_packages &lt;- read_csv(\"generated_data/all_packages.csv\")\n\n#top 30 packages by download count, excludes ggplot2\ntop_packages &lt;- c(sorted_packages$package[2:31])\n\n#all packages that can be found on CRAN (cran download count is not null)\ncran_packages &lt;- c(sorted_packages$package[!is.na(sorted_packages$downloads)])\n\nDefines a ‘get_cd_data’ function that retrieves historical cran download count data using the cranDownloads function of packageRank.\n\nget_cd_data &lt;- function(pkg) {\n  cranDownloads(packages = pkg, to = 2025)$cranlogs.data\n}\n\nRetrieves cran download data for top 30 packages and all cran packages.\n\ndc_top_packages &lt;- map_dfr(top_packages, get_cd_data)\ndc_cran_packages &lt;- map_dfr(cran_packages, get_cd_data)\n\nCreates an interactive time series plot that shows daily download counts of the top 30 ggplot packages across time.\n\ndc_history_plot &lt;- ggplot(dc_top_packages, aes(x = date, y = count, color = package)) + \n  geom_smooth(se = FALSE, linewidth = .5) +\n  labs(title = \"Downloads Across Time\", x = \"Date\", y = \"Download Count\")\n\n#uses plotly package to make plot interactive\ndc_history_plotly &lt;- ggplotly(dc_history_plot)\ndc_history_plotly\n\n\n\n\n\nCreates an interactive plot that shows most downloaded dates and the respective download counts of the top 30 ggplot packages.\n\n#finds max download count dates\nmax_date_df &lt;- dc_top_packages %&gt;%\n  group_by(package) %&gt;%\n  slice(which.max(count)) %&gt;%\n  select(package, max_date = date, max_downloads = count)\n\n#scatterplot of the most downloaded dates and respective download counts\nmax_dc_plot &lt;- ggplot(max_date_df, aes(x = max_date, y = max_downloads, color = package)) +\n  geom_point() +\n  labs(title = \"Max Download Dates by Package\", x = \"Max Download Date\", y = \"Download Count\")\n\n#uses plotly to be interactive\nmax_dc_plotly &lt;- ggplotly(max_dc_plot)\nmax_dc_plotly\n\n\n\n\n\nCreates an interactive plot that shows the average daily download count of all cran packages over time.\n\n#finds average download count for all dates\naverage_dc &lt;- dc_cran_packages %&gt;%\n  group_by(date) %&gt;%\n  summarize(average_dc = mean(count, na.rm = TRUE))\n\naverage_dc_plot &lt;- ggplot(average_dc, aes(x = date, y = average_dc)) + \n  geom_point(size = 0.05) +\n  labs(title = \"Average Downloads by Date\", x = \"Date\", y = \"Download Count\")\n\n#uses plotly to be interactive\naverage_dc_plotly &lt;- ggplotly(average_dc_plot)\naverage_dc_plotly\n\n\n\n\n\nCreates boxplots that show the daily download count of the top 30 ggplot packages for every month and every day of the week.\n\n#determines separates daily download count data by month and by day of the week \nseasonal_data &lt;- dc_top_packages %&gt;%\n  mutate(month = month(date, label = TRUE),\n         day_of_week = wday(date, label = TRUE))\n\n#create seasonal plots by month and day of week\ndc_monthly &lt;- ggplot(seasonal_data, aes(x = month, y = count)) +\n  geom_boxplot() +\n  ylim(0, 5000) +\n  labs(title = \"Months in Downloads\", x = \"Month\", y = \"Download Count\")\ndc_monthly\n\n\n\n\n\n\n\ndc_daily &lt;- ggplot(seasonal_data, aes(x = day_of_week, y = count)) +\n  geom_boxplot() +\n  ylim(0, 5000) +\n  labs(title = \"Days of the Week in Downloads\", x = \"Day of Week\", y = \"Download Count\")\ndc_daily",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Plots to Visualize Download Trends</span>"
    ]
  }
]