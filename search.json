[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "TITLE",
    "section": "",
    "text": "Introduction",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "timeseries.html",
    "href": "timeseries.html",
    "title": "1  Time Series",
    "section": "",
    "text": "library(tidyverse)\nlibrary(packageRank)\n\ntop_packages &lt;- c(\"ggrepel\", \"cowplot\",\"ggpubr\", \"ggsci\", \"ggsignif\", \"patchwork\", \"ggmap\")\n\ntime_series &lt;- function(pkg) {\n  cranDownloads(packages = pkg, to = 2025)$cranlogs.data\n}\n\nallpackages &lt;- map_dfr(top_packages, time_series)\n\n\nggplot(allpackages, aes(x = date, y = count, color = package)) + \n  geom_smooth(se = FALSE, linewidth = .75)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Time Series</span>"
    ]
  },
  {
    "objectID": "tidyverse_gallery_scrape.html",
    "href": "tidyverse_gallery_scrape.html",
    "title": "2  Tidyverse Gallery Scrape",
    "section": "",
    "text": "The following code is designed to scrape the names of packages in the ggplot environment from the tidyverse gallery (https://exts.ggplot2.tidyverse.org/gallery/) and then retrieve the cumulative historical cran download count for each. It also scrapes the github star count listed for these packages.\nFirst import the necessary packages:\n\nlibrary(tidyverse)\nlibrary(rvest) #html webscraping\nlibrary(packageRank) #to retrieve CRAN download counts\n\nRead in the downloaded tidyverse gallery page html file. Must download webpage for the github star scrape to work properly.\n\ndf &lt;- read_html(\"raw_data/exts.ggplot2.tidyverse.org.html\")\n\nScrape the package names and store in a package_names vector.\n\npackage_names &lt;- df |&gt;\n  html_elements(\"div.card-content\") |&gt; \n  html_elements(\"span.card-title\") |&gt; \n  html_text()\n\nThe below function get_total_downloads takes in a package name and a date parameter to retrieve a cumulative count of that package’s cran downloads up until that date by utilizing the cranDownloads function of packageRank.\n\nget_total_downloads &lt;- function(pkg, date) {\n  #to = 2025 pulls entire download history\n  cd &lt;- cranDownloads(packages = pkg, to = 2025) \n  \n  #retrieving the 'cumulative' value of a particular date gets total download    count up to that date\n  cd$cranlogs.data$cumulative [ \n    cd$cranlogs.data$date == date \n  ]\n}\n\nTo find the most current total historical download count, set a target_date of two days before today. Depending on the time of day, cranDownloads is updated to either 1 or 2 days previous to the current day.\n\ntarget_date &lt;- Sys.Date()-2\n\nRetrieve cran download count for each package by looping across package_names and store in a new vector called downloads_count. Directly passing in a package_names vector into cranDownloads function does not work properly. Will take a few minutes to complete.\n\ndownloads_count &lt;- numeric(length(package_names))\n\n#cranDownloads sometimes will throw an error that terminates the loop if not handled properly\nfor (i in seq_along(package_names)) {\n  dc &lt;- tryCatch(\n    get_total_downloads(package_names[i], target_date),\n    \n    #if the package is not found in cran return NA\n    error = function(e) NA\n  )\n  downloads_count[i] &lt;- ifelse(length(dc) == 0, NA, dc)\n}\n\nScrape github star count from the gallery webpage.\n\ngithub_stars &lt;- df |&gt; \n  html_elements(\"span.github-btn\") |&gt;\n  html_elements(\"a.gh-count\") |&gt; \n  html_text() |&gt; as.numeric()\n\nStore data in a new dataframe with a column indicating gallery as the source and export as csv.\n\ngallery_packages &lt;- data.frame(package = package_names, stars = github_stars, downloads = downloads_count, gallery = TRUE)\n\nhead(gallery_packages)\n\n   package stars downloads gallery\n1 ggQQunif     8     23312    TRUE\n2  ggupset   354    148759    TRUE\n3     xmrr     7     24946    TRUE\n4    ggpcp     1      6004    TRUE\n5     gg3D   104        NA    TRUE\n6     ggQC    46     62260    TRUE\n\nwrite_csv(gallery_packages, \"generated_data/gallery_packages.csv\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Tidyverse Gallery Scrape</span>"
    ]
  },
  {
    "objectID": "cran_scrape.html",
    "href": "cran_scrape.html",
    "title": "3  CRAN Packages Webpage",
    "section": "",
    "text": "The following code is designed to scrape the names of packages in the ggplot environment from the CRAN page (https://cran.r-project.org/web/packages/available_packages_by_name.html) to then retrieve the cumulative historical cran download count for each.\nFirst import the necessary packages:\n\nlibrary(tidyverse)\nlibrary(rvest) #html webscraping\nlibrary(packageRank) #to retrieve CRAN download counts\n\nRead in the downloaded CRAN packages (alphabetical order) page html file.\n\ndf &lt;- read_html(\"raw_data/CRAN_ Available Packages By Name.html\")\n\nScrape all packages names from the page.\n\nnames &lt;- df |&gt;\n  html_elements(\"span.CRAN\") |&gt; \n  html_text()\n\nFilter for the names that start with gg by finding the index boundaries and store in gg_package_names.\n\n#beginning index for 'gg' names\ngg_start &lt;- which(substr(names, 1, 2) == \"gg\")[1] \n#end index for 'gg' names\ngg_end &lt;- which(substr(names, 1, 2) == \"gh\")[1] - 1 \n\ngg_package_names &lt;- names[gg_start:gg_end]\n\nRemove packages that start with gg but are not relevant to ggplot2. These names were determined manually and saved in the ‘non_ggplot_packages.csv’ file.\n\nremove_packages &lt;- read.csv(\"raw_data/non_ggplot_packages.csv\")[[1]]\n\nggplot_package_names &lt;- gg_package_names[!gg_package_names %in% remove_packages]\n\nScrape all package descriptions from the page. The resulting vector elements alternate between a package name and its description (e.g. ‘ggplot2’, ‘Create Elegant Data Visualisations Using the Grammar of Graphics’, ‘ggplot2.utils’, etc.), and is offset by a “” element between every letter change (e.g. between the end of all ‘a’ names and start of ‘b’ names).\n\n#returns a vector that alternates between package names and their descriptions\ndesc &lt;- df |&gt;\n  html_elements(\"div.container\") |&gt; \n  html_elements(\"table\") |&gt; \n  html_elements(\"tbody\") |&gt; \n  html_elements(\"tr\") |&gt; \n  html_elements(\"td\") |&gt; \n  html_text()\n\nFilter for only the packages with names that start with ‘gg’ by identifying index boundaries, and remove package names, keeping only descriptions, by retaining every other element to store in new vector.\n\n#beginning index for 'gg' names in descriptions\nfirst_gg &lt;- which(substr(desc, 1, 2) == \"gg\")[1] \n\n#end index for 'gg' names in descriptions\nend_gg &lt;- which(substr(desc, 1, 2) == \"gh\")[1] - 1 \n\ndesc_gg &lt;- desc[first_gg:end_gg]\n\n#Select only descriptions (remove package names) by storing every other element\ngg_descriptions &lt;- desc_gg[c(FALSE, TRUE)]\n\nRemove descriptions of packages starting with gg but not relevant to ggplot2. Found manually and saved in ‘non_ggplot_desc.csv’ file.\n\n#removes line breaks in descriptions to match csv file formatting\ngg_descriptions &lt;- gsub(\"\\n\", \" \", gg_descriptions)\n\nremove_desc &lt;- read.csv(\"raw_data/non_ggplot_desc.csv\")[[1]]\n\nggplot_descriptions &lt;- gg_descriptions[!gg_descriptions %in% remove_desc]\n\nThe following block of code finds additional ggplot packages that do not start with gg. The names and descriptions are saved in csv files that can be read in for the future.\n\n#finds all non gg package names\nnon_gg_desc &lt;- desc[c(1:(first_gg-1), (end_gg+1):length(desc))] \n\n#found indices at which either the description or name contains 'ggplot', removes the first index since it is a duplicate\ngg_indices &lt;- grep('ggplot', non_gg_desc)[-1] \n\n#removes a known duplicate index where name and desc both contain 'ggplot'\ngg_indices &lt;- gg_indices[-match(30865, gg_indices)] \n\n\n#replaces manually found indices at which the name contains 'ggplot' with the indices of their descriptions\nreplace &lt;- c(13588, 20251, 29832)\nfor (num in replace) {\n  pos &lt;- match(num, gg_indices)\n  gg_indices[pos] &lt;- gg_indices[pos] + 1\n}\n\n#names are at the elements -1 before each desc\nadd_ggplot_names &lt;- non_gg_desc[gg_indices-1] \nadd_ggplot_desc &lt;- non_gg_desc[gg_indices]\n\n#save down additional names and desc for future reference\nwrite_csv(data.frame(names = add_ggplot_names, indices = gg_indices-1), \"raw_data/add_ggplot_names.csv\")\nwrite_csv(data.frame(desc = add_ggplot_desc, indices = gg_indices), \"raw_data/add_ggplot_desc.csv\")\n\nAdd the additional ggplot package names and descriptions found and saved in the code block above.\n\nadd_gg_names &lt;- read.csv(\"raw_data/add_ggplot_names.csv\")[[1]]\nadd_gg_desc &lt;- read.csv(\"raw_data/add_ggplot_desc.csv\")[[1]]\n\nall_ggplot_packages &lt;- c(ggplot_package_names, add_gg_names)\nall_ggplot_desc &lt;- c(ggplot_descriptions, add_gg_desc)\n\nThe below function get_total_downloads takes in a package name and a date parameter to retrieve a cumulative count of that package’s cran downloads up until that date by utilizing the cranDownloads function of packageRank.\n\nget_total_downloads &lt;- function(pkg, date) {\n  \n  #to = 2025 pulls entire download history\n  cd &lt;- cranDownloads(packages = pkg, to = 2025)\n  \n  #retrieving the 'cumulative' value of a particular date gets total download count up      to that date\n  cd$cranlogs.data$cumulative [ \n    cd$cranlogs.data$date == date\n  ]\n}\n\nTo find the most current total historical download count, set a target_date of two days before today. Depending on the time of day, cranDownloads is updated to either 1 or 2 days previous to the current day.\n\ntarget_date &lt;- Sys.Date()-2\n\nRetrieve historic cran download count for each package by looping across package names and store in a new vector called downloads_count. Directly passing in a vector of package names into cranDownloads function does not work properly. Will take a few minutes to complete.\n\ndownloads_count &lt;- numeric(length(all_ggplot_packages))\n\n#cranDownloads sometimes will throw an error that terminates the loop if not handled properly\nfor (i in seq_along(all_ggplot_packages)) {\n  dc &lt;- tryCatch(\n    get_total_downloads(all_ggplot_packages[i], target_date),\n    \n    #if the package is not found in cran return NA\n    error = function(e) NA\n  )\n  downloads_count[i] &lt;- ifelse(length(dc) == 0, NA, dc)\n}\n\nStore data in new dataframe with a column indicating CRAN page as the source and export as csv file.\n\ncran_packages &lt;- data.frame(package = all_ggplot_packages, description = all_ggplot_desc, downloads = downloads_count, CRAN = TRUE)\n\nhead(cran_packages)\n\n      package\n1      gg.gap\n2        gg1d\n3     ggalign\n4   ggaligner\n5 ggalignment\n6     ggallin\n                                                           description\n1                              Define Segments in y-Axis for 'ggplot2'\n2       Exploratory Data Analysis using Tiled One-Dimensional Graphics\n3                  A 'ggplot2' Extension for Consistent Axis Alignment\n4 Visualizing Sequence Alignment by Generating Publication-Ready Plots\n5                                   Plots 'D&D'-Style Alignment Charts\n6                                      Grab Bag of 'ggplot2' Functions\n  downloads CRAN\n1     41761 TRUE\n2       627 TRUE\n3      4026 TRUE\n4      3333 TRUE\n5      9618 TRUE\n6     34890 TRUE\n\nwrite_csv(cran_packages, \"generated_data/cran_packages.csv\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>CRAN Packages Webpage</span>"
    ]
  }
]